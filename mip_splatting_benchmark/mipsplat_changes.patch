diff --git a/render.py b/render.py
index 520c097..783fc6e 100644
--- a/render.py
+++ b/render.py
@@ -20,6 +20,8 @@ from utils.general_utils import safe_state
 from argparse import ArgumentParser
 from arguments import ModelParams, PipelineParams, get_combined_args
 from gaussian_renderer import GaussianModel
+import time
+import numpy as np
 
 def render_set(model_path, name, iteration, views, gaussians, pipeline, background, kernel_size, scale_factor):
     render_path = os.path.join(model_path, name, "ours_{}".format(iteration), f"test_preds_{scale_factor}")
@@ -28,11 +30,20 @@ def render_set(model_path, name, iteration, views, gaussians, pipeline, backgrou
     makedirs(render_path, exist_ok=True)
     makedirs(gts_path, exist_ok=True)
 
+    render_time_list = []
     for idx, view in enumerate(tqdm(views, desc="Rendering progress")):
+
+        torch.cuda.synchronize()
+        start = time.time()
         rendering = render(view, gaussians, pipeline, background, kernel_size=kernel_size)["render"]
+        torch.cuda.synchronize()
+        end = time.time()
+        render_time_list.append((end-start))
+        
         gt = view.original_image[0:3, :, :]
         torchvision.utils.save_image(rendering, os.path.join(render_path, '{0:05d}'.format(idx) + ".png"))
         torchvision.utils.save_image(gt, os.path.join(gts_path, '{0:05d}'.format(idx) + ".png"))
+    print(1/np.mean(render_time_list))
 
 def render_sets(dataset : ModelParams, iteration : int, pipeline : PipelineParams, skip_train : bool, skip_test : bool):
     with torch.no_grad():
diff --git a/train.py b/train.py
index 1341e75..6aa3cbe 100644
--- a/train.py
+++ b/train.py
@@ -13,6 +13,7 @@ import os
 import numpy as np
 import open3d as o3d
 import cv2
+import time
 import torch
 import random
 from random import randint
@@ -78,6 +79,7 @@ def training(dataset, opt, pipe, testing_iterations, saving_iterations, checkpoi
     viewpoint_stack = None
     ema_loss_for_log = 0.0
     progress_bar = tqdm(range(first_iter, opt.iterations), desc="Training progress")
+    start_time = time.time()
     first_iter += 1
     for iteration in range(first_iter, opt.iterations + 1):        
         if network_gui.conn == None:
@@ -180,6 +182,11 @@ def training(dataset, opt, pipe, testing_iterations, saving_iterations, checkpoi
                 print("\n[ITER {}] Saving Checkpoint".format(iteration))
                 torch.save((gaussians.capture(), iteration), scene.model_path + "/chkpnt" + str(iteration) + ".pth")
 
+    end_time = time.time() - start_time
+    print(f"writing: {scene.model_path + 'time.txt'}")
+    with open(os.path.join(scene.model_path, 'time.txt'), 'w+') as f:
+        f.write(str(round(end_time/60, 3)) + ' min')
+
 def prepare_output_and_logger(args):    
     if not args.model_path:
         if os.getenv('OAR_JOB_ID'):
